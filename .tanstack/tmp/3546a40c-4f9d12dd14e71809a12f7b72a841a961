import { Outlet, createFileRoute } from "@tanstack/react-router"
import { getUserById } from "@/db/utils/users"
import { jwtVerify } from "jose"
import React from "react"

interface AuthContext {
  user: {
    id: string
    email: string
    name: string
    roles: string[]
    permissions: string[]
  }
}

interface JWTPayload {
  userId: string
  email: string
  roles: string[]
  iat?: number
  exp?: number
}

const getJWTSecret = () => {
  const secret = process.env.JWT_SECRET || "your-secret-key"
  return new TextEncoder().encode(secret)
}

export const Route = createFileRoute("/api/_middleware/auth")({
  beforeLoad: async ({ context }) => {
    const request = context.request as Request // asumsi kamu pasang di SSR context
    const authHeader = request.headers.get("Authorization")

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      throw new Error("Authentication required")
    }

    const token = authHeader.substring(7)

    const { payload } = await jwtVerify(token, getJWTSecret())
    const jwtPayload = payload as unknown as JWTPayload

    const user = await getUserById(jwtPayload.userId)
    if (!user) throw new Error("User not found")

    return {
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        roles: user.roles.map((r) => r.name),
        permissions: user.permissions.map((p) => p.name),
      },
    } as AuthContext
  },
  component: () => <Outlet />,
  errorComponent: ({ error }) => (
    <div>
      <h1>Auth Error</h1>
      <pre>{error.message}</pre>
    </div>
  ),
})
